"use strict";(function(){var $container,haveInitialized,newElems=[],indexKey="__knockout-isotope-index",filterClass,itemClass,isotopeOptions,logger;if(typeof JSLog!=="undefined"&&"Register"in JSLog){logger=JSLog.Register("Knockout-Isotope")}else{logger={debug:function(){},info:function(){},warn:function(){},error:function(){},SetLevel:function(){}}}function beforeAdd(node,index,item,isInitializing){var $elem;if(node.nodeType!==1){return}$elem=$(node);$elem.data(indexKey,index);logger.debug("beforeAdd, isInitializing: "+isInitializing+", index: "+index,$elem[0]);if(isInitializing!==true){$elem.removeClass(filterClass);newElems.push(node);$container.isotope("addItems",$elem);$container.isotope()}}function afterMove(node,index,item){var $elem;if(node.nodeType!==1){return}$elem=$(node);logger.debug("afterMove, item moved from index "+$elem.data(indexKey)+" to: "+index);$elem.data(indexKey,index);$container.isotope("updateSortData",$elem)}function beforeRemove(node,index,item){var $elem;if(node.nodeType!==1){return}$elem=$(node);logger.debug("beforeRemove, item removed at index "+$elem.data(indexKey));$container.isotope("remove",$elem)}ko.bindingHandlers.isotope={defaultFilterClass:"knockout-isotope-filter",defaultItemClass:"knockout-isotope-item",_getSortData:function($elem){var result=$elem.data(indexKey);logger.debug("Getting sort data for element: "+result,$elem[0]);return result},makeTemplateValueAccessor:function(valueAccessor){return function(){var modelValue=valueAccessor(),options,unwrappedValue=ko.utils.peekObservable(modelValue);options={beforeAdd:beforeAdd,afterMove:afterMove,beforeRemove:beforeRemove};if(!unwrappedValue||typeof unwrappedValue.length==="number"){ko.utils.extend(options,{foreach:modelValue,templateEngine:ko.nativeTemplateEngine.instance});return options}ko.utils.unwrapObservable(modelValue);ko.utils.extend(options,{foreach:unwrappedValue.data,as:unwrappedValue.as,includeDestroyed:unwrappedValue.includeDestroyed,templateEngine:ko.nativeTemplateEngine.instance});return options}},init:function(element,valueAccessor,allBindingsAccessor,viewModel,bindingContext){var parameters;logger.debug("Initializing binding");filterClass=ko.bindingHandlers.isotope.defaultFilterClass;itemClass=ko.bindingHandlers.isotope.defaultItemClass;isotopeOptions={};haveInitialized=false;$container=$(element);if($container.children().length!==1){throw new Error("The element must have *1* child, from to instantiate Isotope items")}parameters=ko.utils.unwrapObservable(valueAccessor());if(parameters&&typeof parameters=="object"&&!("length"in parameters)){if(parameters.isotopeOptions){var clientOptions=parameters.isotopeOptions();if(typeof clientOptions!=="object"){throw new Error("isotopeOptions callback must return object")}ko.utils.extend(isotopeOptions,clientOptions)}if(parameters.filterClass){filterClass=parameters.filterClass}if(parameters.itemClass){itemClass=parameters.itemClass}}$container.children().addClass(itemClass).addClass(filterClass);ko.bindingHandlers.template.init(element,ko.bindingHandlers.isotope.makeTemplateValueAccessor(valueAccessor));return{controlsDescendantBindings:true}},update:function(element,valueAccessor,allBindingsAccessor,viewModel,bindingContext){ko.bindingHandlers.template.update(element,ko.bindingHandlers.isotope.makeTemplateValueAccessor(valueAccessor),allBindingsAccessor,viewModel,bindingContext);if(!haveInitialized){logger.debug("Binding update called for the first time, initializing Isotope");isotopeOptions.itemSelector="."+itemClass;isotopeOptions.filter="."+filterClass;isotopeOptions.getSortData={index:ko.bindingHandlers.isotope._getSortData};isotopeOptions.sortBy="index";$container.isotope(isotopeOptions)}else{logger.debug("Updating binding, "+newElems.length+" new item(s)");$(newElems).addClass(filterClass);newElems.splice(0,newElems.length);$container.isotope()}var data=ko.bindingHandlers.isotope.makeTemplateValueAccessor(valueAccessor)().foreach;ko.utils.unwrapObservable(data);haveInitialized=true;return{controlsDescendantBindings:true}}}})();